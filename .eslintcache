[{"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\index.tsx":"1","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\App.tsx":"2","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Home.tsx":"3","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Login.tsx":"4","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Signup.tsx":"5","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\types.tsx":"6","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\store.tsx":"7","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\actions\\userActions.tsx":"8","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\reducers\\userReducer.tsx":"9","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Steps.tsx":"10","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\config.tsx":"11","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\actions\\stepsActions.tsx":"12","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Learning.tsx":"13","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\actions\\learningActions.tsx":"14","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\reducers\\learningReducer.tsx":"15","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\components\\AddSubject.tsx":"16","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\components\\Navbar.tsx":"17","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\components\\Title.tsx":"18"},{"size":333,"mtime":1611001874487,"results":"19","hashOfConfig":"20"},{"size":2504,"mtime":1614520074215,"results":"21","hashOfConfig":"20"},{"size":2062,"mtime":1614520426369,"results":"22","hashOfConfig":"20"},{"size":1464,"mtime":1614120635906,"results":"23","hashOfConfig":"20"},{"size":2025,"mtime":1614122169944,"results":"24","hashOfConfig":"20"},{"size":357,"mtime":1613944961577,"results":"25","hashOfConfig":"20"},{"size":682,"mtime":1613871543000,"results":"26","hashOfConfig":"20"},{"size":1446,"mtime":1611001650033,"results":"27","hashOfConfig":"20"},{"size":594,"mtime":1610327755055,"results":"28","hashOfConfig":"20"},{"size":2304,"mtime":1614125072495,"results":"29","hashOfConfig":"20"},{"size":88,"mtime":1610888612005,"results":"30","hashOfConfig":"20"},{"size":204,"mtime":1613867913732,"results":"31","hashOfConfig":"20"},{"size":10973,"mtime":1614128865174,"results":"32","hashOfConfig":"20"},{"size":1937,"mtime":1614115191148,"results":"33","hashOfConfig":"20"},{"size":654,"mtime":1613945230895,"results":"34","hashOfConfig":"20"},{"size":832,"mtime":1613946021907,"results":"35","hashOfConfig":"20"},{"size":734,"mtime":1614121721837,"results":"36","hashOfConfig":"20"},{"size":267,"mtime":1614123107198,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1ks94t0",{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\index.tsx",[],["82","83"],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\App.tsx",["84","85"],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Home.tsx",["86","87"],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Login.tsx",["88"],"import React, { FC, ChangeEvent, useState } from 'react';\r\n\r\nimport store from '../redux/store';\r\nimport { loginUser } from '../redux/actions/userActions';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ninterface Props {}\r\n\r\nconst Login: FC<Props> = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    if (email.includes('@')) {\r\n      console.log('email');\r\n    } else {\r\n      console.log('handle');\r\n    }\r\n\r\n    console.log(email, password);\r\n\r\n    const userData = {\r\n      email,\r\n      password,\r\n    };\r\n\r\n    loginUser(userData, dispatch);\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    switch (e.target.name) {\r\n      case 'email':\r\n        setEmail(e.target.value);\r\n        return;\r\n      case 'password':\r\n        setPassword(e.target.value);\r\n        return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='Login'>\r\n      <h1>Login</h1>\r\n      <form className='form' onSubmit={handleSubmit}>\r\n        <label>Username or Email</label>\r\n        <input name='email' type='text' value={email} onChange={handleChange} />\r\n        <label>Password</label>\r\n        <input name='password' type='password' value={password} onChange={handleChange} />\r\n        <button data-testid='submit-button'>submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Signup.tsx",["89"],"import React, { FC, ChangeEvent, useState } from 'react';\r\n\r\nimport store from '../redux/store';\r\nimport { signupUser } from '../redux/actions/userActions';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ninterface Props {}\r\n\r\nconst Signup: FC<Props> = () => {\r\n  const [handle, setHandle] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirm, setConfirm] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (e: any) => {\r\n    console.log('submitted');\r\n    e.preventDefault();\r\n    let userData = {\r\n      handle,\r\n      email,\r\n      password,\r\n      confirm,\r\n    };\r\n    console.log(userData);\r\n    signupUser(userData, dispatch);\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    switch (e.target.name) {\r\n      case 'handle':\r\n        setHandle(e.target.value);\r\n        return;\r\n      case 'email':\r\n        setEmail(e.target.value);\r\n        return;\r\n      case 'password':\r\n        setPassword(e.target.value);\r\n        return;\r\n      case 'confirm':\r\n        setConfirm(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='main'>\r\n      <h1>Signup</h1>\r\n      <form className='form' onSubmit={handleSubmit}>\r\n        <label>Username</label>\r\n        <input\r\n          name='handle'\r\n          type='text'\r\n          value={handle}\r\n          onChange={handleChange}\r\n        />\r\n        <label>Email</label>\r\n        <input name='email' type='text' value={email} onChange={handleChange} />\r\n        <label>Password</label>\r\n        <input\r\n          name='password'\r\n          type='password'\r\n          value={password}\r\n          onChange={handleChange}\r\n        />\r\n        <label>Confirm Password</label>\r\n        <input\r\n          name='confirm'\r\n          type='password'\r\n          value={confirm}\r\n          onChange={handleChange}\r\n        />\r\n        <button data-testid='submit-button'>submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\types.tsx",[],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\store.tsx",[],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\actions\\userActions.tsx",["90"],"import { SET_USER, SET_UNAUTHENTICATED } from '../types';\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\nimport { useDispatch } from 'react-redux';\r\nimport { api } from '../../config';\r\n\r\nconst setAuthorizationHeader = (token: any) => {\r\n  const FBIdToken = `Bearer ${token}`;\r\n  localStorage.setItem('FBIdToken', FBIdToken);\r\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\r\n};\r\n\r\nexport const getUserData = () => async (dispatch: any) => {\r\n  const userDetails = await axios.get(`${api}/user`);\r\n\r\n  dispatch({\r\n    type: SET_USER,\r\n    payload: userDetails.data,\r\n  });\r\n};\r\n\r\nexport const signupUser = async (newUserData: any, dispatch: any) => {\r\n  const res: any = await axios.post(`${api}/signup`, {\r\n    email: newUserData.email,\r\n    password: newUserData.password,\r\n    confirmPassword: newUserData.confirmPassword,\r\n    handle: newUserData.handle,\r\n  });\r\n  setAuthorizationHeader(res.data.token);\r\n\r\n  dispatch(getUserData());\r\n  navigate('/');\r\n};\r\n\r\nexport const loginUser = async (userData: any, dispatch: any) => {\r\n  console.log(userData);\r\n  const res = await axios.post(`${api}/login`, userData);\r\n  setAuthorizationHeader(res.data.token);\r\n  dispatch(getUserData());\r\n  navigate('/');\r\n};\r\n\r\nexport const logoutUser = (dispatch: any) => {\r\n  localStorage.removeItem('FBIdToken');\r\n  delete axios.defaults.headers.common['Authorization'];\r\n  dispatch({ type: SET_UNAUTHENTICATED });\r\n};\r\n","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\reducers\\userReducer.tsx",[],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Steps.tsx",["91","92"],"import React, { FC, useState, useEffect } from 'react';\r\nimport { Link } from '@reach/router';\r\n\r\nimport { setStepData } from '../redux/actions/stepsActions';\r\n\r\nimport Title from '../components/Title';\r\n\r\ninterface Props {}\r\n\r\nconst Steps: FC<Props> = () => {\r\n  const [dateWalked, setDateWalked] = useState('');\r\n  const [stepsWalked, setStepsWalked] = useState(0);\r\n\r\n  const [revealState, setRevealState] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const date = new Date();\r\n    const yy = date.getFullYear();\r\n    const mm = date.getMonth();\r\n    const dd = date.getDate();\r\n    const formatDate = `${yy}-${\r\n      mm > 9 ? mm + 1 : 0 + (mm + 1).toString()\r\n    }-${dd}`;\r\n    setDateWalked(formatDate);\r\n  }, []);\r\n\r\n  const handleChange = (e: any) => {\r\n    switch (e.target.name) {\r\n      case 'dateWalked':\r\n        setDateWalked(e.target.value);\r\n        return;\r\n      case 'stepsWalked':\r\n        setStepsWalked(e.target.value);\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    setStepData(stepsWalked, dateWalked);\r\n  };\r\n\r\n  const handleClick = (num: number) => {\r\n    const date = new Date(dateWalked);\r\n    const yy = date.getFullYear();\r\n    const mm = date.getMonth();\r\n    const dd = date.getDate();\r\n    const formatDate = `${yy}-${mm > 9 ? mm + 1 : 0 + (mm + 1).toString()}-${\r\n      dd > 10 ? dd + num : 0 + (dd + num).toString()\r\n    }`;\r\n    setDateWalked(formatDate);\r\n  };\r\n\r\n  return (\r\n    <div className='main'>\r\n      <Title title='Steps' />\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          name='dateWalked'\r\n          type='date'\r\n          value={dateWalked}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          name='stepsWalked'\r\n          type='number'\r\n          value={stepsWalked}\r\n          onChange={handleChange}\r\n        />\r\n        <button type='submit'>submit</button>\r\n        <button type='button' onClick={() => handleClick(-1)}>\r\n          Previous\r\n        </button>\r\n        <button type='button' onClick={() => handleClick(1)}>\r\n          Next\r\n        </button>\r\n      </form>\r\n      {revealState ? (\r\n        <div>\r\n          <p>{dateWalked}</p>\r\n          <p>{stepsWalked}</p>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Steps;\r\n","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\config.tsx",[],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\actions\\stepsActions.tsx",["93"],"import axios from 'axios';\r\nimport { api } from '../../config';\r\n\r\nexport const setStepData = async (steps: number, day: string) => {\r\n  const res = await axios.post(`${api}/steps`, { steps, day });\r\n};\r\n","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\pages\\Learning.tsx",["94","95"],"import React, { FC, useState } from 'react';\r\nimport { Link } from '@reach/router';\r\n\r\nimport { useDispatch, useStore } from 'react-redux';\r\n\r\nimport AddSubject from '../components/AddSubject';\r\n\r\nimport {\r\n  setLearningCard,\r\n  setPendingCard,\r\n  setSubject,\r\n  updateLearningCard,\r\n  updatePendingCard,\r\n} from '../redux/actions/learningActions';\r\n\r\nimport Title from '../components/Title';\r\n\r\ninterface Props {}\r\n\r\nconst Learning: FC<Props> = () => {\r\n  const [cardTitle, setCardTitle] = useState('');\r\n  const [cardBody, setCardBody] = useState('');\r\n  const [cardSubject, setCardSubject] = useState('');\r\n  const [pendingTitle, setPendingTitle] = useState('');\r\n  const [pendingBody, setPendingBody] = useState('');\r\n  const [pendingCompleted, setPendingCompleted] = useState(false);\r\n\r\n  const [existingCardTitle, setExistingCardTitle] = useState('');\r\n  const [existingCardBody, setExistingCardBody] = useState('');\r\n  const [existingCardSubject, setExistingCardSubject] = useState('');\r\n  const [existingPendingTitle, setExistingPendingTitle] = useState('');\r\n  const [existingPendingBody, setExistingPendingBody] = useState('');\r\n  const [existingPendingCompleted, setExistingPendingCompleted] = useState(\r\n    false\r\n  );\r\n\r\n  const [editingCard, setEditingCard] = useState(false);\r\n  const [editingPending, setEditingPending] = useState(false);\r\n\r\n  const [cardSelector, setCardSelector] = useState(0);\r\n  const [pendingSelector, setPendingSelector] = useState(0);\r\n\r\n  const dispatch = useDispatch();\r\n  const store = useStore();\r\n  const state = store.getState();\r\n  const { cards, pendings, subjects } = state.learning;\r\n\r\n  const handleNextClick = (e: any) => {\r\n    let cardRandomNum = Math.floor(Math.random() * cards.length);\r\n    let pendingRandomNum = Math.floor(Math.random() * pendings.length);\r\n    console.log('fired');\r\n    switch (e.target.name) {\r\n      case 'cardClick':\r\n        if (cards.length > 1 && cardRandomNum === cardSelector) {\r\n          handleNextClick(e);\r\n          return;\r\n        } else {\r\n          setCardSelector(cardRandomNum);\r\n          setExistingCardTitle(cards[cardRandomNum].title);\r\n          setExistingCardBody(cards[cardRandomNum].body);\r\n        }\r\n        return;\r\n      case 'pendingClick':\r\n        if (pendings.length > 1 && pendingRandomNum === pendingSelector) {\r\n          console.log('reroll');\r\n          handleNextClick(e);\r\n\r\n          return;\r\n        } else {\r\n          if (pendings[pendingRandomNum].isCompleted === true) {\r\n            console.log('completed!');\r\n            handleNextClick(e);\r\n            return;\r\n          }\r\n          setPendingSelector(pendingRandomNum);\r\n          setExistingPendingTitle(pendings[pendingRandomNum].title);\r\n          setExistingPendingBody(pendings[pendingRandomNum].body);\r\n          setExistingPendingCompleted(pendings[pendingSelector].isCompleted);\r\n        }\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (e: any) => {\r\n    switch (e.target.name) {\r\n      case 'cardEdit':\r\n        setEditingCard(!editingCard);\r\n        setExistingCardTitle(cards[cardSelector].title);\r\n        setExistingCardBody(cards[cardSelector].body);\r\n        return;\r\n      case 'pendingEdit':\r\n        setEditingPending(!editingPending);\r\n        setExistingPendingTitle(pendings[pendingSelector].title);\r\n        setExistingPendingBody(pendings[pendingSelector].body);\r\n        setExistingPendingCompleted(pendings[pendingSelector].isCompleted);\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: any) => {\r\n    switch (e.target.name) {\r\n      case 'cardTitle':\r\n        setCardTitle(e.target.value);\r\n        return;\r\n      case 'cardBody':\r\n        setCardBody(e.target.value);\r\n        return;\r\n      case 'cardSubject':\r\n        setCardSubject(e.target.value);\r\n        return;\r\n      case 'pendingTitle':\r\n        setPendingTitle(e.target.value);\r\n        return;\r\n      case 'pendingBody':\r\n        setPendingBody(e.target.value);\r\n        return;\r\n      case 'pendingCompleted':\r\n        setPendingCompleted(!pendingCompleted);\r\n        return;\r\n      case 'existingCardTitle':\r\n        setExistingCardTitle(e.target.value);\r\n        return;\r\n      case 'existingCardBody':\r\n        setExistingCardBody(e.target.value);\r\n        return;\r\n      case 'existingCardSubject':\r\n        setExistingCardSubject(e.target.value);\r\n        return;\r\n      case 'existingPendingTitle':\r\n        setExistingPendingTitle(e.target.value);\r\n        return;\r\n      case 'existingPendingBody':\r\n        setExistingPendingBody(e.target.value);\r\n        return;\r\n      case 'existingPendingCompleted':\r\n        setExistingPendingCompleted(!existingPendingCompleted);\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n\r\n    switch (e.target.name) {\r\n      case 'learningCard':\r\n        setLearningCard(dispatch, cardTitle, cardBody, cardSubject);\r\n        return;\r\n      case 'pendingCard':\r\n        setPendingCard(dispatch, pendingTitle, pendingBody, pendingCompleted);\r\n        return;\r\n      case 'existingLearningCard':\r\n        updateLearningCard(\r\n          dispatch,\r\n          cards[cardSelector].id,\r\n          existingCardTitle,\r\n          existingCardBody,\r\n          existingCardSubject\r\n        );\r\n        return;\r\n      case 'existingPendingCard':\r\n        updatePendingCard(\r\n          dispatch,\r\n          pendings[pendingSelector].id,\r\n          existingPendingTitle,\r\n          existingPendingBody,\r\n          existingPendingCompleted\r\n        );\r\n    }\r\n  };\r\n\r\n  let subjectsMarkup =\r\n    subjects.length !== 0\r\n      ? subjects.map((subject: any) => (\r\n          <div>\r\n            <p>{subject.name}</p>\r\n          </div>\r\n        ))\r\n      : null;\r\n\r\n  let subjectOptions =\r\n    subjects.length !== 0\r\n      ? subjects.map((subject: any) => (\r\n          <option value={subject.name}>{subject.name}</option>\r\n        ))\r\n      : null;\r\n\r\n  let existingSubjectOptions =\r\n    subjects.length !== 0\r\n      ? subjects.map((subject: any) => (\r\n          <option value={subject.name}>{subject.name}</option>\r\n        ))\r\n      : null;\r\n\r\n  let currentCard =\r\n    cards.length !== 0 ? (\r\n      <div className='markup'>\r\n        <h3>{cards[cardSelector].title}</h3>\r\n        <h5 className='card-subheading'>{cards[cardSelector].subject}</h5>\r\n        <p className='card-body'>{cards[cardSelector].body}</p>\r\n\r\n        {editingCard ? (\r\n          <form name='existingLearningCard' onSubmit={handleSubmit}>\r\n            <label>Title</label>\r\n            <input\r\n              name='existingCardTitle'\r\n              type='text'\r\n              value={existingCardTitle}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Body</label>\r\n            <textarea\r\n              className='input-body'\r\n              name='existingCardBody'\r\n              value={existingCardBody}\r\n              onChange={handleChange}\r\n            />\r\n            <select\r\n              name='existingCardSubject'\r\n              value={existingCardSubject}\r\n              onChange={handleChange}\r\n            >\r\n              <option value=''>Select a subject</option>\r\n              {existingSubjectOptions}\r\n            </select>\r\n            <button type='submit'>submit</button>\r\n          </form>\r\n        ) : null}\r\n\r\n        <button name='cardEdit' onClick={handleEditClick}>\r\n          Edit\r\n        </button>\r\n        <button name='cardClick' onClick={handleNextClick}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    ) : null;\r\n\r\n  let currentPending =\r\n    pendings.length !== 0 ? (\r\n      <div className='markup'>\r\n        <h3>{pendings[pendingSelector].title}</h3>\r\n        <p className='card-body'>{pendings[pendingSelector].body}</p>\r\n        {pendings[pendingSelector].isCompleted ? (\r\n          <p>Completed</p>\r\n        ) : (\r\n          <p>Not Completed</p>\r\n        )}\r\n        {editingPending ? (\r\n          <form name='existingPendingCard' onSubmit={handleSubmit}>\r\n            <label>Title</label>\r\n            <input\r\n              name='existingPendingTitle'\r\n              type='text'\r\n              value={existingPendingTitle}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Body</label>\r\n            <textarea\r\n              className='input-body'\r\n              name='existingPendingBody'\r\n              value={existingPendingBody}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Completed?</label>\r\n            <input\r\n              name='existingPendingCompleted'\r\n              type='checkbox'\r\n              checked={existingPendingCompleted}\r\n              onChange={handleChange}\r\n            />\r\n            <button type='submit'>submit</button>\r\n          </form>\r\n        ) : null}\r\n\r\n        <button name='pendingEdit' onClick={handleEditClick}>\r\n          Edit\r\n        </button>\r\n        <button name='pendingClick' onClick={handleNextClick}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    ) : null;\r\n\r\n  return (\r\n    <div className='main'>\r\n      <Title title='Learning' />\r\n      <div className='card'>{currentCard}</div>\r\n      <div>\r\n        <form name='learningCard' onSubmit={handleSubmit}>\r\n          <label>Title</label>\r\n          <input\r\n            name='cardTitle'\r\n            type='text'\r\n            value={cardTitle}\r\n            onChange={handleChange}\r\n          />\r\n          <label>Body</label>\r\n          <textarea\r\n            className='input-body'\r\n            name='cardBody'\r\n            value={cardBody}\r\n            onChange={handleChange}\r\n          />\r\n          <label>Subject</label>\r\n          <select\r\n            name='cardSubject'\r\n            value={cardSubject}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=''>Select a subject</option>\r\n            {subjectOptions}\r\n          </select>\r\n\r\n          <button type='submit'>submit</button>\r\n        </form>\r\n        <div className='card'>{currentPending}</div>\r\n        <div>\r\n          <form name='pendingCard' onSubmit={handleSubmit}>\r\n            <label>Title</label>\r\n            <input\r\n              name='pendingTitle'\r\n              type='text'\r\n              value={pendingTitle}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Body</label>\r\n            <textarea\r\n              className='input-body'\r\n              name='pendingBody'\r\n              value={pendingBody}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Completed?</label>\r\n            <input\r\n              name='pendingCompleted'\r\n              type='checkbox'\r\n              checked={pendingCompleted}\r\n              onChange={handleChange}\r\n            />\r\n            <button type='submit'>submit</button>\r\n          </form>\r\n          <h3>Add Subject</h3>\r\n          <p></p>\r\n          <AddSubject />\r\n          {subjectsMarkup}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Learning;\r\n","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\actions\\learningActions.tsx",["96","97","98","99","100","101"],"import axios from 'axios';\r\nimport { AnyMxRecord } from 'dns';\r\n\r\nimport { api } from '../../config';\r\n\r\nimport { SET_LEARNING_CARDS, SET_PENDING_CARDS, SET_SUBJECTS } from '../types';\r\n\r\nexport const setLearningCard = async (\r\n  dispatch: any,\r\n  title: string,\r\n  body: string,\r\n  subject: string\r\n) => {\r\n  const res = await axios.post(`${api}/learning`, { title, body, subject });\r\n  getLearningCardsByUser(dispatch);\r\n};\r\n\r\nexport const getLearningCardsByUser = async (dispatch: any) => {\r\n  const res = await axios.get(`${api}/learning`);\r\n  dispatch({ type: SET_LEARNING_CARDS, payload: res.data });\r\n};\r\n\r\nexport const updateLearningCard = async (\r\n  dispatch: any,\r\n  id: any,\r\n  title: string,\r\n  body: string,\r\n  subject: string\r\n) => {\r\n  const res = await axios.put(`${api}/learning`, { id, title, body, subject });\r\n  getLearningCardsByUser(dispatch);\r\n};\r\n\r\nexport const setPendingCard = async (\r\n  dispatch: any,\r\n  title: string,\r\n  body: string,\r\n  isCompleted: boolean\r\n) => {\r\n  const res = await axios.post(`${api}/pending`, { title, body, isCompleted });\r\n  getPendingCardsByUser(dispatch);\r\n};\r\n\r\nexport const getPendingCardsByUser = async (dispatch: any) => {\r\n  const res = await axios.get(`${api}/pending`);\r\n  dispatch({ type: SET_PENDING_CARDS, payload: res.data });\r\n};\r\n\r\nexport const updatePendingCard = async (\r\n  dispatch: any,\r\n  id: any,\r\n  title: string,\r\n  body: string,\r\n  isCompleted: boolean\r\n) => {\r\n  const res = await axios.put(`${api}/pending`, {\r\n    id,\r\n    title,\r\n    body,\r\n    isCompleted,\r\n  });\r\n  getLearningCardsByUser(dispatch);\r\n};\r\n\r\nexport const setSubject = async (dispatch: any, subject: string) => {\r\n  const res = await axios.post(`${api}/subject`, { subject });\r\n  getSubjectsByUser(dispatch);\r\n};\r\n\r\nexport const getSubjectsByUser = async (dispatch: any) => {\r\n  const res = await axios.get(`${api}/subjects`);\r\n  dispatch({ type: SET_SUBJECTS, payload: res.data });\r\n};\r\n","C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\redux\\reducers\\learningReducer.tsx",[],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\components\\AddSubject.tsx",[],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\components\\Navbar.tsx",[],"C:\\Users\\David\\Desktop\\desktop\\Coding\\Work\\orson-home-app\\src\\components\\Title.tsx",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":2,"column":39,"nodeType":"108","messageId":"109","endLine":2,"endColumn":47},{"ruleId":"106","severity":1,"message":"110","line":35,"column":21,"nodeType":"108","messageId":"109","endLine":35,"endColumn":33},{"ruleId":"106","severity":1,"message":"111","line":1,"column":21,"nodeType":"108","messageId":"109","endLine":1,"endColumn":29},{"ruleId":"106","severity":1,"message":"112","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":14},{"ruleId":"106","severity":1,"message":"113","line":3,"column":8,"nodeType":"108","messageId":"109","endLine":3,"endColumn":13},{"ruleId":"106","severity":1,"message":"113","line":3,"column":8,"nodeType":"108","messageId":"109","endLine":3,"endColumn":13},{"ruleId":"106","severity":1,"message":"114","line":4,"column":10,"nodeType":"108","messageId":"109","endLine":4,"endColumn":21},{"ruleId":"106","severity":1,"message":"112","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":14},{"ruleId":"106","severity":1,"message":"115","line":14,"column":23,"nodeType":"108","messageId":"109","endLine":14,"endColumn":37},{"ruleId":"106","severity":1,"message":"116","line":5,"column":9,"nodeType":"108","messageId":"109","endLine":5,"endColumn":12},{"ruleId":"106","severity":1,"message":"112","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":14},{"ruleId":"106","severity":1,"message":"117","line":11,"column":3,"nodeType":"108","messageId":"109","endLine":11,"endColumn":13},{"ruleId":"106","severity":1,"message":"118","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":21},{"ruleId":"106","severity":1,"message":"116","line":14,"column":9,"nodeType":"108","messageId":"109","endLine":14,"endColumn":12},{"ruleId":"106","severity":1,"message":"116","line":30,"column":9,"nodeType":"108","messageId":"109","endLine":30,"endColumn":12},{"ruleId":"106","severity":1,"message":"116","line":40,"column":9,"nodeType":"108","messageId":"109","endLine":40,"endColumn":12},{"ruleId":"106","severity":1,"message":"116","line":56,"column":9,"nodeType":"108","messageId":"109","endLine":56,"endColumn":12},{"ruleId":"106","severity":1,"message":"116","line":66,"column":9,"nodeType":"108","messageId":"109","endLine":66,"endColumn":12},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"@typescript-eslint/no-unused-vars","'Location' is defined but never used.","Identifier","unusedVar","'setAuthState' is assigned a value but never used.","'useState' is defined but never used.","'Link' is defined but never used.","'store' is defined but never used.","'useDispatch' is defined but never used.","'setRevealState' is assigned a value but never used.","'res' is assigned a value but never used.","'setSubject' is defined but never used.","'AnyMxRecord' is defined but never used.","no-global-assign","no-unsafe-negation"]